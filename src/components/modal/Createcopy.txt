<script setup>
import { ref, watch, computed } from "vue";
import axios from "../../../axios";
import { getDate } from "../../composables/date";
import { useAuthStore } from "../../stores/store";
import { decodeJWT } from "../../stores/token";
import DangerComponent from "../../components/toast/DangerComponent.vue";
const emit = defineEmits(["buttonHideModal", "refreshData"]);
const props = defineProps({
  isModalShow: {
    type: Boolean,
    required: true,
  },
  sendBy: {
    type: String,
  },
  method: {
    type: String,
  },
  setDefault: {
    type: Object,
  },
  id: {
    type: Number,
  },
});

// form
const heading = ref("");
const caption = ref("");
const images = ref([]);
const imagePreviews = ref([]);
const token = ref("");
const profile = ref();

const book = ref("Genesis");
const chapter = ref("1");
const verses = ref("");
const text = ref("");

const responseStatus = ref(null);
const responseMessage = ref("");

let scripture = ref("");
let userId;
const closeToast = () => {
  responseStatus.value = null;
  responseMessage.value = "";
};

const booksOfBibleKJV = [
  "Genesis",
  "Exodus",
  "Leviticus",
  "Numbers",
  "Deuteronomy",
  "Joshua",
  "Judges",
  "Ruth",
  "1 Samuel",
  "2 Samuel",
  "1 Kings",
  "2 Kings",
  "1 Chronicles",
  "2 Chronicles",
  "Ezra",
  "Nehemiah",
  "Esther",
  "Job",
  "Psalms",
  "Proverbs",
  "Ecclesiastes",
  "Song of Solomon",
  "Isaiah",
  "Jeremiah",
  "Lamentations",
  "Ezekiel",
  "Daniel",
  "Hosea",
  "Joel",
  "Amos",
  "Obadiah",
  "Jonah",
  "Micah",
  "Nahum",
  "Habakkuk",
  "Zephaniah",
  "Haggai",
  "Zechariah",
  "Malachi",
  "Matthew",
  "Mark",
  "Luke",
  "John",
  "Acts",
  "Romans",
  "1 Corinthians",
  "2 Corinthians",
  "Galatians",
  "Ephesians",
  "Philippians",
  "Colossians",
  "1 Thessalonians",
  "2 Thessalonians",
  "1 Timothy",
  "2 Timothy",
  "Titus",
  "Philemon",
  "Hebrews",
  "James",
  "1 Peter",
  "2 Peter",
  "1 John",
  "2 John",
  "3 John",
  "Jude",
  "Revelation",
];

// store
let store = useAuthStore();

if (store.token) {
  token.value = decodeJWT(store.token);
}

profile.value = store.getUser();

//  hide modal gallery
const buttonHideModal = () => {
  emit("buttonHideModal");
  book.value = "Genesis";
  chapter.value = "1";
  verses.value = "";
};

const handleFileChange = (event) => {
  images.value = Array.from(event.target.files);
  imagePreviews.value = [];

  for (let i = 0; i < images.value.length; i++) {
    const reader = new FileReader();
    reader.onload = (e) => {
      imagePreviews.value.push(e.target.result);
    };
    reader.readAsDataURL(images.value[i]);
  }
};

const submitForm = async () => {
  userId = parseInt(token.value.id);
  switch (props.sendBy) {
    case "gallery":
      if (props.method === "post") {
        const formData = new FormData();
        formData.append("user_id", userId);
        formData.append("heading", heading.value);
        formData.append("caption", caption.value);

        images.value.forEach((image) => {
          formData.append("images", image);
        });

        try {
          const response = await axios.post("/gallery", formData, {
            headers: {
              "Content-Type": "multipart/form-data",
            },
          });

          if (response.status === 200 || response.status === 201) {
            heading.value = "";
            caption.value = "";
            imagePreviews.value.length = 0;

            const data = {
              responseStatus: response.status,
              responseMessage: response.data.message,
            };

            store.setToastSuccess(data);
            emit("refreshData");
            emit("buttonHideModal");
          }
        } catch (err) {
          if (err.response) {
            responseStatus.value = err.response.status;
            responseMessage.value = err.response.data.message;
          } else if (err.request) {
            responseStatus.value = 500;
            responseMessage.value =
              "No response received from the server. Please check your internet connection.";
          } else if (err.message && err.message.includes("timeout")) {
            responseStatus.value = 500;
            responseMessage.value =
              "The request timed out. Please try again later.";
          } else {
            responseStatus.value = 500;
            responseMessage.value = "An error occurred: " + err.message;
          }
        }
      } else if (props.method === "put") {
        const formData = new FormData();
        formData.append("heading", heading.value);
        formData.append("caption", caption.value);

        images.value.forEach((image) => {
          formData.append("images", image);
        });

        try {
          const response = await axios.put(`/gallery/${props.id}`, formData, {
            headers: {
              "Content-Type": "multipart/form-data",
            },
          });
          if (response.status === 200 || response.status === 201) {
            const data = {
              responseStatus: response.status,
              responseMessage: response.data.message,
            };

            store.setToastSuccess(data);
            emit("refreshData");
            emit("buttonHideModal");
          }
        } catch (err) {
          if (err.response) {
            responseStatus.value = err.response.status;
            responseMessage.value = err.response.data.message;
          } else if (err.request) {
            responseStatus.value = 500;
            responseMessage.value =
              "No response received from the server. Please check your internet connection.";
          } else if (err.message && err.message.includes("timeout")) {
            responseStatus.value = 500;
            responseMessage.value =
              "The request timed out. Please try again later.";
          } else {
            responseStatus.value = 500;
            responseMessage.value = "An error occurred: " + err.message;
          }
        }
      }
      break;
    case "event":
      if (props.method === "post") {
        const formData = new FormData();
        formData.append("user_id", userId);
        formData.append("heading", heading.value);
        formData.append("description", caption.value);
        images.value.forEach((image) => {
          formData.append("image", image);
        });
        try {
          const response = await axios.post("/events", formData, {
            headers: {
              "Content-Type": "multipart-form-data",
            },
          });

          if (response.status === 200 || response.status === 201) {
            heading.value = "";
            caption.value = "";
            imagePreviews.value.length = 0;

            const data = {
              responseStatus: response.status,
              responseMessage: response.data.message,
            };

            store.setToastSuccess(data);

            emit("refreshData");
            emit("buttonHideModal");
          }
        } catch (err) {
          if (err.response) {
            responseStatus.value = err.response.status;
            responseMessage.value = err.response.data.message;
          } else if (err.request) {
            responseStatus.value = 500;
            responseMessage.value =
              "No response received from the server. Please check your internet connection.";
          } else if (err.message && err.message.includes("timeout")) {
            responseStatus.value = 500;
            responseMessage.value =
              "The request timed out. Please try again later.";
          } else {
            responseStatus.value = 500;
            responseMessage.value = "An error occurred: " + err.message;
          }
        }
      } else if (props.method === "put") {
        const formData = new FormData();

        formData.append("heading", heading.value);
        formData.append("description", caption.value);
        images.value.forEach((image) => {
          formData.append("image", image);
        });
        try {
          const response = await axios.put(`/events/${props.id}`, formData, {
            headers: {
              "Content-Type": "multipart-form-data",
            },
          });

          if (response.status === 200 || response.status === 201) {
            const data = {
              responseStatus: response.status,
              responseMessage: response.data.message,
            };

            store.setToastSuccess(data);

            emit("refreshData");
            emit("buttonHideModal");
          }
        } catch (err) {
          if (err.response) {
            responseStatus.value = err.response.status;
            responseMessage.value = err.response.data.message;
          } else if (err.request) {
            responseStatus.value = 500;
            responseMessage.value =
              "No response received from the server. Please check your internet connection.";
          } else if (err.message && err.message.includes("timeout")) {
            responseStatus.value = 500;
            responseMessage.value =
              "The request timed out. Please try again later.";
          } else {
            responseStatus.value = 500;
            responseMessage.value = "An error occurred: " + err.message;
          }
        }
      }
      break;
    case "devotional":
      if (props.method === "post") {
        const data = {
          user_id: userId,
          scripture: scripture.value,
          verses: text.value,
          reflection: caption.value,
        };

        try {
          const response = await axios.post("/devotional", data);

          if (response.status === 200 || response.status === 201) {
            scripture.value = "";
            text.value = "";
            caption.value = "";

            const data = {
              responseStatus: response.status,
              responseMessage: response.data.message,
            };

            store.setToastSuccess(data);

            emit("refreshData");
            emit("buttonHideModal");
          }
        } catch (err) {
          if (err.response) {
            responseStatus.value = err.response.status;
            responseMessage.value = err.response.data.message;
          } else if (err.request) {
            responseStatus.value = 500;
            responseMessage.value =
              "No response received from the server. Please check your internet connection.";
          } else if (err.message && err.message.includes("timeout")) {
            responseStatus.value = 500;
            responseMessage.value =
              "The request timed out. Please try again later.";
          } else {
            responseStatus.value = 500;
            responseMessage.value = "An error occurred: " + err.message;
          }
        }
      } else if (props.method === "put") {
        const data = {
          scripture: scripture.value,
          verses: text.value,
          reflection: caption.value,
        };
        try {
          const response = await axios.put(`/devotional/${props.id}`, data);

          if (response.status === 200 || response.status === 201) {
            const data = {
              responseStatus: response.status,
              responseMessage: response.data.message,
            };

            store.setToastSuccess(data);

            emit("refreshData");
            emit("buttonHideModal");
          }
        } catch (err) {
          if (err.response) {
            responseStatus.value = err.response.status;
            responseMessage.value = err.response.data.message;
          } else if (err.request) {
            responseStatus.value = 500;
            responseMessage.value =
              "No response received from the server. Please check your internet connection.";
          } else if (err.message && err.message.includes("timeout")) {
            responseStatus.value = 500;
            responseMessage.value =
              "The request timed out. Please try again later.";
          } else {
            responseStatus.value = 500;
            responseMessage.value = "An error occurred: " + err.message;
          }
        }
      }
  }
};

watch(
  () => props.setDefault,
  (newValue, oldValue) => {
    if (props.method === "put") {
      heading.value = newValue.heading;
      caption.value =
        props.sendBy === "gallery"
          ? newValue.caption
          : props.sendBy === "event"
          ? newValue.description
          : newValue.reflection;
      text.value = newValue.verses ? newValue.verses : null;
      if (newValue.scripture) {
        let newBook = newValue.scripture.split(" ");
        book.value = isNaN(newBook[0])
          ? newBook[0]
          : newBook[0] + " " + newBook[1];
        console.log(book.value);
        let newChapter = isNaN(newBook[0])
          ? newBook[1].split(":")
          : newBook[2].split(":");
        chapter.value = newChapter[0];
        let newVerses = newChapter[1];
        verses.value = newVerses;
      }
    }
  }
);

watch([book, chapter, verses], async ([newBook, newChapter, newVerses]) => {
  const cleanedVerses = newVerses.replace(/\s+/g, "");
  if (newBook && newChapter && cleanedVerses) {
    scripture.value = `${newBook} ${newChapter}:${cleanedVerses}`;

    const response = await fetch(`https://bible-api.com/${scripture.value}`);

    const data = await response.json();

    text.value = data.verses.map((element) => element.text).join(" ");
  }
});
</script>
<template>
  <div
    v-show="isModalShow"
    class="fixed top-0 left-0 w-full h-screen flex items-center justify-center bg-white sm:bg-black sm:bg-opacity-50 md:bg-black md:bg-opacity-50 lg:bg-black lg:bg-opacity-50 xl:bg-black xl:bg-opacity-50 z-[101]"
  >
    <form
      @submit.prevent="submitForm"
      class="bg-white rounded-lg sm:shadow-lg md:shadow-lg lg:shadow-lg xl:shadow-lg w-full sm:w-[500px] h-screen sm:h-auto md:h-auto lg:h-auto xl:h-auto md:w-[500px] lg:w-[500px] xl:w-[500px]"
    >
      <div
        class="flex items-center justify-between p-4 border-b w-full font-bold text-center"
      >
        <div></div>
        <div class="text-lg">
          {{
            method === "post"
              ? "Create post"
              : method === "put"
              ? "Edit post"
              : ""
          }}
        </div>
        <div>
          <i
            @click="buttonHideModal"
            class="fas fa-times p-3 border rounded-lg hover:bg-gray-100"
          ></i>
        </div>
      </div>
      <section class="flex py-5 justify-center w-full h-full">
        <Danger-Component
          :errors="[responseStatus, responseMessage]"
          @closeToast="closeToast"
        />
        <div class="max-h-[580px] overflow-y-auto w-full">
          <div class="flex items-center px-6" v-if="store.token">
            <img
              :src="`https://storage.googleapis.com/mcm-chuch.appspot.com/${profile.profile}`"
              class="rounded-full h-12 w-12 mr-4"
              loading="lazy"
            />
            <div>
              <div class="font-semibold">{{ profile.fullname }}</div>
              <small class="text-gray-500" v-if="method === 'put'"
                >Posted on {{ getDate(setDefault.posted_at) }}</small
              >
            </div>
          </div>
          <div class="px-6 flex gap-1" v-if="sendBy === 'devotional'">
            <select
              class="mt-1 px-2 block outline-none w-full border-gray-300 py-3 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              v-model="book"
              required
            >
              <option
                v-for="(books, i) in booksOfBibleKJV"
                :key="i"
                :value="books"
              >
                {{ books }}
              </option>
            </select>
            <select
              v-model="chapter"
              id="chapter"
              required
              class="mt-1 px-2 block outline-none w-full border-gray-300 py-3 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            >
              <option
                v-for="(number, index) in 119"
                :key="index + 1"
                :value="index + 1"
              >
                {{ index + 1 }}
              </option>
            </select>
            <input
              type="text"
              v-model="verses"
              id="verses"
              required
              class="mt-1 px-2 block outline-none w-full border-gray-300 py-3 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              placeholder="(e.g., 1 or 1-10)"
            />
          </div>
          <div class="px-6 py-2" v-if="text">
            {{ text ? text : "" }}
          </div>
          <div class="px-6" v-if="sendBy !== 'devotional'">
            <input
              type="text"
              v-model="heading"
              id="heading"
              required
              class="mt-1 block outline-none w-full border-gray-300 py-3 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              placeholder="About"
            />
          </div>
          <div class="px-6 py-3">
            <textarea
              v-model="caption"
              id="caption"
              required
              class="mt-1 h-24 outline-none block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              :placeholder="
                sendBy === 'devotional' ? 'Reflection' : 'What\'s on your mind'
              "
            ></textarea>
          </div>
          <div
            class="mx-6 px-2 py-3 border rounded-lg max-h-[230px] overflow-y-auto element-with-horizontal-scroll"
            v-if="sendBy !== 'devotional'"
          >
            <input
              type="file"
              @change="handleFileChange"
              id="images"
              :multiple="sendBy !== 'event'"
              accept="image/*"
              class="opacity-0 h-[150px] absolute z-10"
            />
            <div
              for="images"
              class="relative cursor-pointer w-full h-[110px] sm:h-[150px] md:h-[150px] lg:h-[150px] xl:h-[150px] bg-gray-50 hover:bg-gray-100 flex items-center justify-center rounded-lg"
            >
              <div class="absolute top-center mt-5 text-center">
                <i
                  class="fas fa-images bg-gray-200 rounded-full p-3 text-[18px] text-center"
                ></i>
                <h1 class="font-semibold">Add photos</h1>
                <small class="text-gray-500">or drag and drop</small>
              </div>
            </div>

            <!-- Image previews -->
            <div
              :class="
                sendBy === 'event'
                  ? 'mt-2 gap-2'
                  : 'mt-2 grid grid-cols-3 gap-2'
              "
            >
              <div v-for="(image, index) in imagePreviews" :key="index">
                <img
                  :src="image"
                  :class="
                    sendBy === 'event'
                      ? 'w-full object-cover rounded-md'
                      : 'w-full h-24 object-cover rounded-md'
                  "
                  v-if="image"
                  alt="Preview"
                  loading="lazy"
                />
              </div>
            </div>
          </div>
          <div class="w-full px-6 py-3">
            <button
              type="submit"
              class="w-full items-center px-4 py-3 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#D98757] hover:bg-[#D98757] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#D98757]"
            >
              {{ method === "post" ? "Post" : method === "put" ? "Save" : "" }}
            </button>
          </div>
        </div>
      </section>
    </form>
  </div>
</template>